% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_profile_function.R
\name{create.profile}
\alias{create.profile}
\title{Calculating the Profile Likelihood}
\usage{
create.profile(which.par, par.names, range, fit.fn, do.not.fit = NULL,
  homedir = getwd(), optim.runs = 5, random.borders = 1, refit = FALSE,
  save.rel.diff = 0.01, con.tol = 0.1, control.optim = list(maxit = 1000),
  future.off = FALSE, bind.old = FALSE, delete.old = FALSE, ...)
}
\arguments{
\item{which.par}{Name of the parameter that a profile should be obtained for. If multiple profiles are supposed to be calculated, a vector can be passed along as well. Alternatively, supplying "all.par" calculates the profiles for all available parameters.}

\item{par.names}{A vector containing the names and initial values for all available parameters.}

\item{range}{A list containing the respective ranges for which the profile should be calculated.}

\item{fit.fn}{A cost function. Has to take the complete parameter vector as an input (needs to be names \code{parms}) and must return the corresponding negative log-likelihood (-2LL, see Burnham and Anderson 2002).}

\item{do.not.fit}{A named vector containing the values of the parameters that should not be fitted. Default to NULL.}

\item{homedir}{The directory to which the results should be saved to.}

\item{optim.runs}{The number of times that each model will be fitted by \code{\link{optim}}. Default to 5.}

\item{random.borders}{The ranges from which the random initial parameter conditions for all \code{optim.runs} larger than one are sampled. Can be either given as a vector containing the relative deviations for all parameters or as a matrix containing in its first column the lower and in its second column the upper border values. Parameters are uniformly sampled based on \code{\link{runif}}. Default to 1 (100\% deviation of all parameters).}

\item{refit}{If TRUE, previously fitted ranges will be fitted again and results will be overwritten according to the value set in \code{save.rel.diff}. Default to FALSE. Works only if \code{delete.old} is set to FALSE.}

\item{save.rel.diff}{A numeric value indicating when to overwrite a pre-existing result. Default to 0.01, which means that results get overwritten only if an improvement larger than 1\% of the pre-existing value is made.}

\item{con.tol}{The absolute convergence tolerance of each fitting run (see Details). Default is set to 0.1.}

\item{control.optim}{Control parameters passed along to \code{optim}. For more details, see \code{\link{optim}}.}

\item{future.off}{Logical. If TRUE, \code{\link{future}} will not be used to calculate the results. Default to FALSE.}

\item{bind.old}{Logical. If TRUE, previously calculated values will also be added to the profile if available. Default to FALSE.}

\item{delete.old}{Logical. If TRUE, the individual point-wise fits created by \code{\link{point.profile}} will be deleted after using them. Default to FALSE.}

\item{...}{Additional parameters that can be passed along to \code{\link{future}} or \code{fit.fn}.}
}
\value{
A list containing the respective profile values for every specified parameter.
}
\description{
Calculating the Profile Likelihood
}
\examples{
#create data with standard deviation of 1
x.values <- 1:7
y.values <-  9 * x.values^2 - exp(2 * x.values)
sd.y.values <- rep(1,7)

#define initial parameter values
inits <- c(p1 = 3, p2 = 4, p3 = -2, p4 = 2, p5 = 0)

#define cost function that returns the negative log-likelihood
cost_function <- function(parms, x.vals, y.vals, sd.y){
  # restrict the search range to -5 to +5
  if(max(abs(parms)) > 5){
    return(NA)
  }
  with(as.list(c(parms)), {
    res <- p1*4 + p2*x.vals + p3^2*x.vals^2 + p4*sin(x.vals)  - exp(p5*x.vals)
    diff <- sum((res - y.vals)^2/sd.y)
  })
}

#perform model selection
res <- create.profile(which.par = "all.par",
                      par.names = inits,
                      range = list(seq(0, 2, 0.1),
                                 seq(0, 5, 1),
                                 seq(2.9, 3.1, 0.01),
                                 seq(0, 3, 0.1),
                                 seq(1.999999, 2.000001, 0.0000001)),
                      fit.fn = cost_function,
                      optim.runs = 1,
                      delete.old = TRUE,
                      x.vals = x.values,
                      y.vals = y.values,
                      sd.y = sd.y.values)
}
